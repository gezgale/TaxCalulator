// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxCalulator.AppDbContext;

namespace TaxCalulator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230624143319_CreateSecondPartsOfTablesWithData")]
    partial class CreateSecondPartsOfTablesWithData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MobilePhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Name = "Gothenburg",
                            ProvinceId = 1
                        });
                });

            modelBuilder.Entity("Entities.CongestionTaxHours", b =>
                {
                    b.Property<int>("CongestionTaxHoursID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromTimeOfCongestion")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimesInString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToTimeOfCongestion")
                        .HasColumnType("datetime2");

                    b.HasKey("CongestionTaxHoursID");

                    b.HasIndex("CityId");

                    b.ToTable("CongestionTaxHours");

                    b.HasData(
                        new
                        {
                            CongestionTaxHoursID = 1,
                            Amount = 8m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "06:00–06:29",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 6, 29, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 2,
                            Amount = 13m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "06:30–06:59",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 6, 59, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 3,
                            Amount = 18m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "07:00–07:59",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 7, 59, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 4,
                            Amount = 13m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "08:00–08:29",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 8, 29, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 5,
                            Amount = 8m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "08:30–14:59",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 14, 59, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 6,
                            Amount = 13m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "15:00–15:29",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 15, 29, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 7,
                            Amount = 18m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "15:30–16:59",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 16, 59, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 8,
                            Amount = 13m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "17:00–17:59",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 17, 59, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 9,
                            Amount = 8m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "18:00–18:29",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 18, 29, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 10,
                            Amount = 0m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "18:30–05:59",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 23, 59, 59, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CongestionTaxHoursID = 11,
                            Amount = 0m,
                            CityId = 1,
                            FromTimeOfCongestion = new DateTime(2023, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimesInString = "18:30–05:59",
                            ToTimeOfCongestion = new DateTime(2023, 6, 24, 5, 59, 59, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Sweden"
                        });
                });

            modelBuilder.Entity("Entities.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            CountryId = 1,
                            Name = "Västra Götaland"
                        });
                });

            modelBuilder.Entity("Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VehicleTypeID")
                        .HasColumnType("int");

                    b.Property<int>("YearModel")
                        .HasColumnType("int");

                    b.HasKey("VehicleID");

                    b.HasIndex("VehicleTypeID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Entities.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsTollFree")
                        .HasColumnType("bit");

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VehicleTypeID");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            VehicleTypeID = 0,
                            IsTollFree = true,
                            VehicleTypeName = "Motorcycle"
                        },
                        new
                        {
                            VehicleTypeID = 1,
                            IsTollFree = true,
                            VehicleTypeName = "Tractor"
                        },
                        new
                        {
                            VehicleTypeID = 2,
                            IsTollFree = true,
                            VehicleTypeName = "Emergency"
                        },
                        new
                        {
                            VehicleTypeID = 3,
                            IsTollFree = true,
                            VehicleTypeName = "Diplomat"
                        },
                        new
                        {
                            VehicleTypeID = 4,
                            IsTollFree = true,
                            VehicleTypeName = "Foreign"
                        },
                        new
                        {
                            VehicleTypeID = 5,
                            IsTollFree = true,
                            VehicleTypeName = "Military"
                        },
                        new
                        {
                            VehicleTypeID = 6,
                            IsTollFree = false,
                            VehicleTypeName = "Sedan"
                        },
                        new
                        {
                            VehicleTypeID = 7,
                            IsTollFree = false,
                            VehicleTypeName = "SUV"
                        },
                        new
                        {
                            VehicleTypeID = 8,
                            IsTollFree = false,
                            VehicleTypeName = "Hatchback"
                        },
                        new
                        {
                            VehicleTypeID = 9,
                            IsTollFree = false,
                            VehicleTypeName = "Convertible"
                        },
                        new
                        {
                            VehicleTypeID = 10,
                            IsTollFree = false,
                            VehicleTypeName = "Coupe"
                        },
                        new
                        {
                            VehicleTypeID = 11,
                            IsTollFree = false,
                            VehicleTypeName = "Minivan"
                        },
                        new
                        {
                            VehicleTypeID = 12,
                            IsTollFree = false,
                            VehicleTypeName = "Pickup Truck"
                        },
                        new
                        {
                            VehicleTypeID = 13,
                            IsTollFree = false,
                            VehicleTypeName = "Electric"
                        },
                        new
                        {
                            VehicleTypeID = 14,
                            IsTollFree = false,
                            VehicleTypeName = "Hybrid"
                        },
                        new
                        {
                            VehicleTypeID = 15,
                            IsTollFree = false,
                            VehicleTypeName = "Luxury"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.City", b =>
                {
                    b.HasOne("Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Entities.CongestionTaxHours", b =>
                {
                    b.HasOne("Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Province", b =>
                {
                    b.HasOne("Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entities.Vehicle", b =>
                {
                    b.HasOne("Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Entities.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Entities.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
